{
  "version": 3,
  "sources": ["../../lambda/api.ts"],
  "sourcesContent": ["import { APIGatewayProxyEventV2, APIGatewayProxyResultV2, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, PutCommand, GetCommand, QueryCommand, UpdateCommand, ScanCommand, DeleteCommand } from '@aws-sdk/lib-dynamodb';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst dynamoClient = new DynamoDBClient({ region: process.env.REGION || 'us-east-2' });\nconst docClient = DynamoDBDocumentClient.from(dynamoClient);\n\nconst ADMIN_EMAIL = process.env.ADMIN_EMAIL || 'showchoirtreasurer@gmail.com';\n\nconst corsHeaders = {\n  'Content-Type': 'application/json',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type,Authorization',\n  'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\n};\n\ninterface Student {\n  studentId: string;\n  schoolYear: string;\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  choir: string[];\n  parentIds: string[];\n  balance: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Parent {\n  parentId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  studentIds: string[];\n  createdAt: string;\n}\n\ninterface Transaction {\n  transactionId: string;\n  date: string;\n  studentId: string;\n  schoolYear: string;\n  description: string;\n  type: 'charge' | 'credit';\n  amount: number;\n  notes?: string;\n  createdAt: string;\n  createdBy: string;\n}\n\nexport const handler = async (\n  event: APIGatewayProxyEventV2,\n  context: Context\n): Promise<APIGatewayProxyResultV2> => {\n  console.log('Event:', JSON.stringify(event, null, 2));\n\n  const path = event.rawPath;\n  const method = event.requestContext.http.method;\n\n  // Handle OPTIONS for CORS\n  if (method === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: corsHeaders,\n      body: '',\n    };\n  }\n\n  try {\n    // Health check\n    if (path === '/health' && method === 'GET') {\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          region: process.env.REGION || 'us-east-2',\n          tables: {\n            students: process.env.STUDENTS_TABLE,\n            parents: process.env.PARENTS_TABLE,\n            transactions: process.env.TRANSACTIONS_TABLE,\n          }\n        }),\n      };\n    }\n\n    // Admin check\n    if (path === '/admin/check' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      const userEmail = body.email || '';\n      const isAdmin = userEmail.toLowerCase() === ADMIN_EMAIL.toLowerCase();\n      \n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          isAdmin,\n          userEmail,\n          adminEmail: ADMIN_EMAIL,\n        }),\n      };\n    }\n\n    // Students endpoints\n    if (path === '/students' || path.startsWith('/students/')) {\n      if (method === 'GET' && path === '/students') {\n        const params = event.queryStringParameters;\n        const schoolYear = params?.schoolYear;\n        \n        if (!process.env.STUDENTS_TABLE) {\n          console.log('No students table configured');\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n\n        try {\n          const result = await docClient.send(new ScanCommand({\n            TableName: process.env.STUDENTS_TABLE,\n          }));\n          \n          let items = result.Items || [];\n          if (schoolYear) {\n            items = items.filter((item: any) => item.schoolYear === schoolYear);\n          }\n          \n          console.log(`Found ${items.length} students`);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify(items),\n          };\n        } catch (error) {\n          console.error('Error fetching students:', error);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n      }\n\n      if (method === 'POST' && path === '/students') {\n        const body = JSON.parse(event.body || '{}');\n        console.log('Creating student:', body);\n        \n        const student: Student = {\n          studentId: uuidv4(),\n          schoolYear: body.schoolYear || '2024-2025',\n          firstName: body.firstName,\n          lastName: body.lastName,\n          gender: body.gender || 'male',\n          choir: body.choir || [],\n          parentIds: body.parentIds || [],\n          balance: 0,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        if (process.env.STUDENTS_TABLE) {\n          try {\n            await docClient.send(new PutCommand({\n              TableName: process.env.STUDENTS_TABLE,\n              Item: student,\n            }));\n            console.log('Student created successfully:', student.studentId);\n          } catch (error) {\n            console.error('Error creating student:', error);\n            return {\n              statusCode: 500,\n              headers: corsHeaders,\n              body: JSON.stringify({ error: 'Failed to create student' }),\n            };\n          }\n        }\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify(student),\n        };\n      }\n\n      // Update student\n      if (method === 'PUT' && path.startsWith('/students/')) {\n        const studentId = path.split('/')[2];\n        const body = JSON.parse(event.body || '{}');\n        \n        if (process.env.STUDENTS_TABLE) {\n          try {\n            const getResult = await docClient.send(new GetCommand({\n              TableName: process.env.STUDENTS_TABLE,\n              Key: { studentId },\n            }));\n            \n            if (getResult.Item) {\n              const updatedStudent = {\n                ...getResult.Item,\n                ...body,\n                studentId,\n                updatedAt: new Date().toISOString(),\n              };\n              \n              await docClient.send(new PutCommand({\n                TableName: process.env.STUDENTS_TABLE,\n                Item: updatedStudent,\n              }));\n              \n              return {\n                statusCode: 200,\n                headers: corsHeaders,\n                body: JSON.stringify(updatedStudent),\n              };\n            }\n          } catch (error) {\n            console.error('Error updating student:', error);\n          }\n        }\n        \n        return {\n          statusCode: 404,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Student not found' }),\n        };\n      }\n    }\n\n    // Parents endpoints\n    if (path === '/parents' || path.startsWith('/parents/')) {\n      if (method === 'GET' && path === '/parents') {\n        if (!process.env.PARENTS_TABLE) {\n          console.log('No parents table configured');\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n\n        try {\n          const result = await docClient.send(new ScanCommand({\n            TableName: process.env.PARENTS_TABLE,\n          }));\n          \n          console.log(`Found ${result.Items?.length || 0} parents`);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify(result.Items || []),\n          };\n        } catch (error) {\n          console.error('Error fetching parents:', error);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n      }\n\n      if (method === 'POST' && path === '/parents') {\n        const body = JSON.parse(event.body || '{}');\n        console.log('Creating parent:', body);\n        \n        const parent: Parent = {\n          parentId: uuidv4(),\n          firstName: body.firstName,\n          lastName: body.lastName,\n          email: body.email,\n          phone: body.phone,\n          studentIds: body.studentIds || [],\n          createdAt: new Date().toISOString(),\n        };\n\n        if (process.env.PARENTS_TABLE) {\n          try {\n            await docClient.send(new PutCommand({\n              TableName: process.env.PARENTS_TABLE,\n              Item: parent,\n            }));\n            console.log('Parent created successfully:', parent.parentId);\n          } catch (error) {\n            console.error('Error creating parent:', error);\n            return {\n              statusCode: 500,\n              headers: corsHeaders,\n              body: JSON.stringify({ error: 'Failed to create parent' }),\n            };\n          }\n        }\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify(parent),\n        };\n      }\n    }\n\n    // Transactions endpoints\n    if (path === '/transactions' || path.startsWith('/transactions/')) {\n      if (method === 'GET' && path === '/transactions') {\n        const params = event.queryStringParameters;\n        const schoolYear = params?.schoolYear;\n        \n        if (!process.env.TRANSACTIONS_TABLE) {\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n\n        try {\n          const result = await docClient.send(new ScanCommand({\n            TableName: process.env.TRANSACTIONS_TABLE,\n          }));\n          \n          let items = result.Items || [];\n          if (schoolYear) {\n            items = items.filter((item: any) => item.schoolYear === schoolYear);\n          }\n          \n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify(items),\n          };\n        } catch (error) {\n          console.error('Error fetching transactions:', error);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n      }\n\n      if (method === 'POST' && path === '/transactions') {\n        const body = JSON.parse(event.body || '{}');\n        console.log('Creating transaction:', body);\n        \n        const transaction: Transaction = {\n          transactionId: uuidv4(),\n          date: body.date || new Date().toISOString().split('T')[0],\n          studentId: body.studentId,\n          schoolYear: body.schoolYear,\n          description: body.description,\n          type: body.type,\n          amount: body.amount,\n          notes: body.notes,\n          createdAt: new Date().toISOString(),\n          createdBy: 'admin',\n        };\n\n        if (process.env.TRANSACTIONS_TABLE) {\n          try {\n            await docClient.send(new PutCommand({\n              TableName: process.env.TRANSACTIONS_TABLE,\n              Item: transaction,\n            }));\n            console.log('Transaction created successfully:', transaction.transactionId);\n            \n            // Update student balance\n            if (process.env.STUDENTS_TABLE && transaction.studentId) {\n              try {\n                const studentResult = await docClient.send(new GetCommand({\n                  TableName: process.env.STUDENTS_TABLE,\n                  Key: { studentId: transaction.studentId },\n                }));\n                \n                if (studentResult.Item) {\n                  const currentBalance = studentResult.Item.balance || 0;\n                  const balanceChange = transaction.type === 'charge' ? transaction.amount : -transaction.amount;\n                  const newBalance = currentBalance + balanceChange;\n                  \n                  await docClient.send(new UpdateCommand({\n                    TableName: process.env.STUDENTS_TABLE,\n                    Key: { studentId: transaction.studentId },\n                    UpdateExpression: 'SET balance = :balance, updatedAt = :now',\n                    ExpressionAttributeValues: {\n                      ':balance': newBalance,\n                      ':now': new Date().toISOString(),\n                    },\n                  }));\n                  console.log(`Updated student ${transaction.studentId} balance to ${newBalance}`);\n                }\n              } catch (error) {\n                console.error('Error updating student balance:', error);\n              }\n            }\n          } catch (error) {\n            console.error('Error creating transaction:', error);\n            return {\n              statusCode: 500,\n              headers: corsHeaders,\n              body: JSON.stringify({ error: 'Failed to create transaction' }),\n            };\n          }\n        }\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify(transaction),\n        };\n      }\n    }\n\n    // Bulk charge endpoint\n    if (path === '/transactions/bulk' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      const { choir, gender, description, amount, date, schoolYear, type } = body;\n      \n      console.log('Processing bulk charge:', body);\n      \n      if (!process.env.STUDENTS_TABLE || !process.env.TRANSACTIONS_TABLE) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Tables not configured' }),\n        };\n      }\n      \n      try {\n        // Get all students\n        const studentsResult = await docClient.send(new ScanCommand({\n          TableName: process.env.STUDENTS_TABLE,\n        }));\n        \n        let students = studentsResult.Items || [];\n        \n        // Filter by school year\n        students = students.filter((s: any) => s.schoolYear === schoolYear);\n        \n        // Filter by choir\n        students = students.filter((s: any) => s.choir && s.choir.includes(choir));\n        \n        // Filter by gender if specified (only for Music Warehouse)\n        if (choir === 'Music Warehouse' && gender) {\n          students = students.filter((s: any) => s.gender === gender);\n        }\n        \n        console.log(`Found ${students.length} students for bulk charge`);\n        \n        // Create transaction for each student\n        const transactions = [];\n        for (const student of students) {\n          const transaction: Transaction = {\n            transactionId: uuidv4(),\n            date: date || new Date().toISOString().split('T')[0],\n            studentId: student.studentId,\n            schoolYear,\n            description,\n            type: type || 'charge',\n            amount,\n            notes: `Bulk ${type || 'charge'} for ${choir}${gender ? ` (${gender})` : ''}`,\n            createdAt: new Date().toISOString(),\n            createdBy: 'admin',\n          };\n          \n          // Save transaction\n          await docClient.send(new PutCommand({\n            TableName: process.env.TRANSACTIONS_TABLE!,\n            Item: transaction,\n          }));\n          \n          // Update student balance\n          const currentBalance = student.balance || 0;\n          const balanceChange = transaction.type === 'charge' ? amount : -amount;\n          const newBalance = currentBalance + balanceChange;\n          \n          await docClient.send(new UpdateCommand({\n            TableName: process.env.STUDENTS_TABLE!,\n            Key: { studentId: student.studentId },\n            UpdateExpression: 'SET balance = :balance, updatedAt = :now',\n            ExpressionAttributeValues: {\n              ':balance': newBalance,\n              ':now': new Date().toISOString(),\n            },\n          }));\n          \n          transactions.push(transaction);\n        }\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({\n            message: `Bulk ${type || 'charge'} applied to ${transactions.length} students`,\n            transactions,\n          }),\n        };\n      } catch (error) {\n        console.error('Error processing bulk charge:', error);\n        return {\n          statusCode: 500,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Failed to process bulk charge' }),\n        };\n      }\n    }\n\n    // Invoice endpoints\n    if (path === '/invoices/send' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      \n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          message: 'Invoice would be sent here',\n          studentId: body.studentId,\n          schoolYear: body.schoolYear,\n        }),\n      };\n    }\n\n    // Default response\n    return {\n      statusCode: 404,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        message: 'Not Found',\n        path,\n        method,\n      }),\n    };\n\n  } catch (error) {\n    console.error('Error:', error);\n    return {\n      statusCode: 500,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        error: 'Internal Server Error',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      }),\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["uuidv4"]
}

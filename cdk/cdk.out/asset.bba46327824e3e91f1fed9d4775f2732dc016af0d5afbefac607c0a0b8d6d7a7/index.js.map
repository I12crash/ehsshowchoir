{
  "version": 3,
  "sources": ["../../lambda/api.ts"],
  "sourcesContent": ["import { APIGatewayProxyEventV2, APIGatewayProxyResultV2, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, PutCommand, GetCommand, QueryCommand, UpdateCommand, ScanCommand, DeleteCommand } from '@aws-sdk/lib-dynamodb';\nimport { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst dynamoClient = new DynamoDBClient({ region: process.env.REGION || 'us-east-2' });\nconst docClient = DynamoDBDocumentClient.from(dynamoClient);\nconst sesClient = new SESClient({ region: process.env.REGION || 'us-east-2' });\n\nconst ADMIN_EMAIL = process.env.ADMIN_EMAIL || 'showchoirtreasurer@gmail.com';\n\nconst corsHeaders = {\n  'Content-Type': 'application/json',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type,Authorization',\n  'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\n};\n\ninterface Student {\n  studentId: string;\n  schoolYear: string;\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  choir: string[];\n  parentIds: string[];\n  balance: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Parent {\n  parentId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  studentIds: string[];\n  createdAt: string;\n}\n\ninterface Transaction {\n  transactionId: string;\n  date: string;\n  studentId: string;\n  schoolYear: string;\n  description: string;\n  type: 'charge' | 'credit';\n  amount: number;\n  notes?: string;\n  createdAt: string;\n  createdBy: string;\n  modifiedAt?: string;\n  modifiedBy?: string;\n  auditLog?: AuditEntry[];\n}\n\ninterface AuditEntry {\n  timestamp: string;\n  user: string;\n  action: string;\n  changes?: any;\n}\n\nexport const handler = async (\n  event: APIGatewayProxyEventV2,\n  context: Context\n): Promise<APIGatewayProxyResultV2> => {\n  console.log('Event:', JSON.stringify(event, null, 2));\n\n  const path = event.rawPath;\n  const method = event.requestContext.http.method;\n\n  // Handle OPTIONS for CORS\n  if (method === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: corsHeaders,\n      body: '',\n    };\n  }\n\n  try {\n    // Health check\n    if (path === '/health' && method === 'GET') {\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          region: process.env.REGION || 'us-east-2',\n          tables: {\n            students: process.env.STUDENTS_TABLE,\n            parents: process.env.PARENTS_TABLE,\n            transactions: process.env.TRANSACTIONS_TABLE,\n          }\n        }),\n      };\n    }\n\n    // Check if email is registered parent\n    if (path === '/auth/check-parent' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      const email = body.email?.toLowerCase();\n      \n      if (!email || !process.env.PARENTS_TABLE) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ \n            isRegistered: false,\n            message: 'Email not provided or system not configured'\n          }),\n        };\n      }\n      \n      try {\n        const result = await docClient.send(new ScanCommand({\n          TableName: process.env.PARENTS_TABLE,\n          FilterExpression: 'email = :email',\n          ExpressionAttributeValues: {\n            ':email': email,\n          },\n        }));\n        \n        const isRegistered = result.Items && result.Items.length > 0;\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({ \n            isRegistered,\n            message: isRegistered \n              ? 'Email is registered as a parent' \n              : 'Email is not registered in the system. Please contact the administrator.'\n          }),\n        };\n      } catch (error) {\n        console.error('Error checking parent email:', error);\n        return {\n          statusCode: 500,\n          headers: corsHeaders,\n          body: JSON.stringify({ \n            isRegistered: false,\n            message: 'Error checking registration status'\n          }),\n        };\n      }\n    }\n\n    // Admin check\n    if (path === '/admin/check' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      const userEmail = body.email || '';\n      const isAdmin = userEmail.toLowerCase() === ADMIN_EMAIL.toLowerCase();\n      \n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          isAdmin,\n          userEmail,\n          adminEmail: ADMIN_EMAIL,\n        }),\n      };\n    }\n\n    // Students endpoints\n    if (path === '/students' || path.startsWith('/students/')) {\n      if (method === 'GET' && path === '/students') {\n        const params = event.queryStringParameters;\n        const schoolYear = params?.schoolYear;\n        \n        if (!process.env.STUDENTS_TABLE) {\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n\n        try {\n          const result = await docClient.send(new ScanCommand({\n            TableName: process.env.STUDENTS_TABLE,\n          }));\n          \n          let items = result.Items || [];\n          if (schoolYear) {\n            items = items.filter((item: any) => item.schoolYear === schoolYear);\n          }\n          \n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify(items),\n          };\n        } catch (error) {\n          console.error('Error fetching students:', error);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n      }\n\n      if (method === 'POST' && path === '/students') {\n        const body = JSON.parse(event.body || '{}');\n        const student: Student = {\n          studentId: uuidv4(),\n          schoolYear: body.schoolYear || '2024-2025',\n          firstName: body.firstName,\n          lastName: body.lastName,\n          gender: body.gender || 'male',\n          choir: body.choir || [],\n          parentIds: body.parentIds || [],\n          balance: 0,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        if (process.env.STUDENTS_TABLE) {\n          await docClient.send(new PutCommand({\n            TableName: process.env.STUDENTS_TABLE,\n            Item: student,\n          }));\n        }\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify(student),\n        };\n      }\n\n      if (method === 'PUT' && path.startsWith('/students/')) {\n        const studentId = path.split('/')[2];\n        const body = JSON.parse(event.body || '{}');\n        \n        if (process.env.STUDENTS_TABLE) {\n          const getResult = await docClient.send(new GetCommand({\n            TableName: process.env.STUDENTS_TABLE,\n            Key: { studentId },\n          }));\n          \n          if (getResult.Item) {\n            const updatedStudent = {\n              ...getResult.Item,\n              ...body,\n              studentId,\n              updatedAt: new Date().toISOString(),\n            };\n            \n            await docClient.send(new PutCommand({\n              TableName: process.env.STUDENTS_TABLE,\n              Item: updatedStudent,\n            }));\n            \n            return {\n              statusCode: 200,\n              headers: corsHeaders,\n              body: JSON.stringify(updatedStudent),\n            };\n          }\n        }\n        \n        return {\n          statusCode: 404,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Student not found' }),\n        };\n      }\n    }\n\n    // Parents endpoints\n    if (path === '/parents' || path.startsWith('/parents/')) {\n      if (method === 'GET' && path === '/parents') {\n        if (!process.env.PARENTS_TABLE) {\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n\n        try {\n          const result = await docClient.send(new ScanCommand({\n            TableName: process.env.PARENTS_TABLE,\n          }));\n          \n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify(result.Items || []),\n          };\n        } catch (error) {\n          console.error('Error fetching parents:', error);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n      }\n\n      if (method === 'POST' && path === '/parents') {\n        const body = JSON.parse(event.body || '{}');\n        const parent: Parent = {\n          parentId: uuidv4(),\n          firstName: body.firstName,\n          lastName: body.lastName,\n          email: body.email.toLowerCase(),\n          phone: body.phone,\n          studentIds: body.studentIds || [],\n          createdAt: new Date().toISOString(),\n        };\n\n        if (process.env.PARENTS_TABLE) {\n          await docClient.send(new PutCommand({\n            TableName: process.env.PARENTS_TABLE,\n            Item: parent,\n          }));\n        }\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify(parent),\n        };\n      }\n    }\n\n    // Transactions endpoints with editing and audit logging\n    if (path === '/transactions' || path.startsWith('/transactions/')) {\n      if (method === 'GET' && path === '/transactions') {\n        const params = event.queryStringParameters;\n        const schoolYear = params?.schoolYear;\n        \n        if (!process.env.TRANSACTIONS_TABLE) {\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n\n        try {\n          const result = await docClient.send(new ScanCommand({\n            TableName: process.env.TRANSACTIONS_TABLE,\n          }));\n          \n          let items = result.Items || [];\n          if (schoolYear) {\n            items = items.filter((item: any) => item.schoolYear === schoolYear);\n          }\n          \n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify(items),\n          };\n        } catch (error) {\n          console.error('Error fetching transactions:', error);\n          return {\n            statusCode: 200,\n            headers: corsHeaders,\n            body: JSON.stringify([]),\n          };\n        }\n      }\n\n      if (method === 'POST' && path === '/transactions') {\n        const body = JSON.parse(event.body || '{}');\n        const userEmail = body.userEmail || 'admin';\n        \n        const transaction: Transaction = {\n          transactionId: uuidv4(),\n          date: body.date || new Date().toISOString().split('T')[0],\n          studentId: body.studentId,\n          schoolYear: body.schoolYear,\n          description: body.description,\n          type: body.type,\n          amount: body.amount,\n          notes: body.notes,\n          createdAt: new Date().toISOString(),\n          createdBy: userEmail,\n          auditLog: [{\n            timestamp: new Date().toISOString(),\n            user: userEmail,\n            action: 'Created transaction',\n          }],\n        };\n\n        if (process.env.TRANSACTIONS_TABLE) {\n          await docClient.send(new PutCommand({\n            TableName: process.env.TRANSACTIONS_TABLE,\n            Item: transaction,\n          }));\n          \n          // Update student balance\n          if (process.env.STUDENTS_TABLE && transaction.studentId) {\n            const studentResult = await docClient.send(new GetCommand({\n              TableName: process.env.STUDENTS_TABLE,\n              Key: { studentId: transaction.studentId },\n            }));\n            \n            if (studentResult.Item) {\n              const currentBalance = studentResult.Item.balance || 0;\n              const balanceChange = transaction.type === 'charge' ? transaction.amount : -transaction.amount;\n              const newBalance = currentBalance + balanceChange;\n              \n              await docClient.send(new UpdateCommand({\n                TableName: process.env.STUDENTS_TABLE,\n                Key: { studentId: transaction.studentId },\n                UpdateExpression: 'SET balance = :balance, updatedAt = :now',\n                ExpressionAttributeValues: {\n                  ':balance': newBalance,\n                  ':now': new Date().toISOString(),\n                },\n              }));\n            }\n          }\n        }\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify(transaction),\n        };\n      }\n\n      // Edit transaction\n      if (method === 'PUT' && path.startsWith('/transactions/')) {\n        const transactionId = path.split('/')[2];\n        const body = JSON.parse(event.body || '{}');\n        const userEmail = body.userEmail || 'admin';\n        \n        if (!process.env.TRANSACTIONS_TABLE) {\n          return {\n            statusCode: 400,\n            headers: corsHeaders,\n            body: JSON.stringify({ error: 'Transactions table not configured' }),\n          };\n        }\n        \n        // Get existing transaction\n        const getResult = await docClient.send(new GetCommand({\n          TableName: process.env.TRANSACTIONS_TABLE,\n          Key: { transactionId },\n        }));\n        \n        if (!getResult.Item) {\n          return {\n            statusCode: 404,\n            headers: corsHeaders,\n            body: JSON.stringify({ error: 'Transaction not found' }),\n          };\n        }\n        \n        const oldTransaction = getResult.Item as Transaction;\n        const oldAmount = oldTransaction.amount;\n        const oldType = oldTransaction.type;\n        \n        // Create audit entry\n        const auditEntry: AuditEntry = {\n          timestamp: new Date().toISOString(),\n          user: userEmail,\n          action: 'Modified transaction',\n          changes: {\n            old: {\n              amount: oldAmount,\n              type: oldType,\n              description: oldTransaction.description,\n              date: oldTransaction.date,\n              notes: oldTransaction.notes,\n            },\n            new: {\n              amount: body.amount,\n              type: body.type,\n              description: body.description,\n              date: body.date,\n              notes: body.notes,\n            },\n          },\n        };\n        \n        const auditLog = [...(oldTransaction.auditLog || []), auditEntry];\n        \n        // Update transaction\n        const updatedTransaction: Transaction = {\n          ...oldTransaction,\n          date: body.date || oldTransaction.date,\n          description: body.description || oldTransaction.description,\n          type: body.type || oldTransaction.type,\n          amount: body.amount !== undefined ? body.amount : oldTransaction.amount,\n          notes: body.notes,\n          modifiedAt: new Date().toISOString(),\n          modifiedBy: userEmail,\n          auditLog,\n        };\n        \n        await docClient.send(new PutCommand({\n          TableName: process.env.TRANSACTIONS_TABLE,\n          Item: updatedTransaction,\n        }));\n        \n        // Update student balance\n        if (process.env.STUDENTS_TABLE && updatedTransaction.studentId) {\n          const studentResult = await docClient.send(new GetCommand({\n            TableName: process.env.STUDENTS_TABLE,\n            Key: { studentId: updatedTransaction.studentId },\n          }));\n          \n          if (studentResult.Item) {\n            const currentBalance = studentResult.Item.balance || 0;\n            \n            // Reverse old transaction\n            const reverseOld = oldType === 'charge' ? -oldAmount : oldAmount;\n            // Apply new transaction\n            const applyNew = updatedTransaction.type === 'charge' ? updatedTransaction.amount : -updatedTransaction.amount;\n            \n            const newBalance = currentBalance + reverseOld + applyNew;\n            \n            await docClient.send(new UpdateCommand({\n              TableName: process.env.STUDENTS_TABLE,\n              Key: { studentId: updatedTransaction.studentId },\n              UpdateExpression: 'SET balance = :balance, updatedAt = :now',\n              ExpressionAttributeValues: {\n                ':balance': newBalance,\n                ':now': new Date().toISOString(),\n              },\n            }));\n          }\n        }\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify(updatedTransaction),\n        };\n      }\n\n      // Delete transaction\n      if (method === 'DELETE' && path.startsWith('/transactions/')) {\n        const transactionId = path.split('/')[2];\n        const params = event.queryStringParameters;\n        const userEmail = params?.userEmail || 'admin';\n        \n        if (!process.env.TRANSACTIONS_TABLE) {\n          return {\n            statusCode: 400,\n            headers: corsHeaders,\n            body: JSON.stringify({ error: 'Transactions table not configured' }),\n          };\n        }\n        \n        // Get existing transaction\n        const getResult = await docClient.send(new GetCommand({\n          TableName: process.env.TRANSACTIONS_TABLE,\n          Key: { transactionId },\n        }));\n        \n        if (!getResult.Item) {\n          return {\n            statusCode: 404,\n            headers: corsHeaders,\n            body: JSON.stringify({ error: 'Transaction not found' }),\n          };\n        }\n        \n        const transaction = getResult.Item as Transaction;\n        \n        // Create deleted transaction record with audit log\n        const deletedTransaction = {\n          ...transaction,\n          deleted: true,\n          deletedAt: new Date().toISOString(),\n          deletedBy: userEmail,\n          auditLog: [\n            ...(transaction.auditLog || []),\n            {\n              timestamp: new Date().toISOString(),\n              user: userEmail,\n              action: 'Deleted transaction',\n            },\n          ],\n        };\n        \n        // Update instead of delete to preserve audit trail\n        await docClient.send(new PutCommand({\n          TableName: process.env.TRANSACTIONS_TABLE,\n          Item: deletedTransaction,\n        }));\n        \n        // Reverse the balance change\n        if (process.env.STUDENTS_TABLE && transaction.studentId) {\n          const studentResult = await docClient.send(new GetCommand({\n            TableName: process.env.STUDENTS_TABLE,\n            Key: { studentId: transaction.studentId },\n          }));\n          \n          if (studentResult.Item) {\n            const currentBalance = studentResult.Item.balance || 0;\n            const reverseAmount = transaction.type === 'charge' ? -transaction.amount : transaction.amount;\n            const newBalance = currentBalance + reverseAmount;\n            \n            await docClient.send(new UpdateCommand({\n              TableName: process.env.STUDENTS_TABLE,\n              Key: { studentId: transaction.studentId },\n              UpdateExpression: 'SET balance = :balance, updatedAt = :now',\n              ExpressionAttributeValues: {\n                ':balance': newBalance,\n                ':now': new Date().toISOString(),\n              },\n            }));\n          }\n        }\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Transaction deleted', transaction: deletedTransaction }),\n        };\n      }\n    }\n\n    // Bulk charge endpoint\n    if (path === '/transactions/bulk' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      const { choir, gender, description, amount, date, schoolYear, type, userEmail } = body;\n      \n      if (!process.env.STUDENTS_TABLE || !process.env.TRANSACTIONS_TABLE) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Tables not configured' }),\n        };\n      }\n      \n      const studentsResult = await docClient.send(new ScanCommand({\n        TableName: process.env.STUDENTS_TABLE,\n      }));\n      \n      let students = studentsResult.Items || [];\n      students = students.filter((s: any) => s.schoolYear === schoolYear);\n      students = students.filter((s: any) => s.choir && s.choir.includes(choir));\n      \n      if (choir === 'Music Warehouse' && gender) {\n        students = students.filter((s: any) => s.gender === gender);\n      }\n      \n      const transactions = [];\n      for (const student of students) {\n        const transaction: Transaction = {\n          transactionId: uuidv4(),\n          date: date || new Date().toISOString().split('T')[0],\n          studentId: student.studentId,\n          schoolYear,\n          description,\n          type: type || 'charge',\n          amount,\n          notes: `Bulk ${type || 'charge'} for ${choir}${gender ? ` (${gender})` : ''}`,\n          createdAt: new Date().toISOString(),\n          createdBy: userEmail || 'admin',\n          auditLog: [{\n            timestamp: new Date().toISOString(),\n            user: userEmail || 'admin',\n            action: `Created bulk ${type || 'charge'}`,\n          }],\n        };\n        \n        await docClient.send(new PutCommand({\n          TableName: process.env.TRANSACTIONS_TABLE!,\n          Item: transaction,\n        }));\n        \n        const currentBalance = student.balance || 0;\n        const balanceChange = transaction.type === 'charge' ? amount : -amount;\n        const newBalance = currentBalance + balanceChange;\n        \n        await docClient.send(new UpdateCommand({\n          TableName: process.env.STUDENTS_TABLE!,\n          Key: { studentId: student.studentId },\n          UpdateExpression: 'SET balance = :balance, updatedAt = :now',\n          ExpressionAttributeValues: {\n            ':balance': newBalance,\n            ':now': new Date().toISOString(),\n          },\n        }));\n        \n        transactions.push(transaction);\n      }\n      \n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          message: `Bulk ${type || 'charge'} applied to ${transactions.length} students`,\n          transactions,\n        }),\n      };\n    }\n\n    // Invoice endpoints with actual email sending\n    if (path === '/invoices/send' && method === 'POST') {\n      const body = JSON.parse(event.body || '{}');\n      const { studentId, schoolYear, subject, emailBody } = body;\n      \n      if (!process.env.STUDENTS_TABLE || !process.env.PARENTS_TABLE || !process.env.TRANSACTIONS_TABLE) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Tables not configured' }),\n        };\n      }\n      \n      // Get student\n      const studentResult = await docClient.send(new GetCommand({\n        TableName: process.env.STUDENTS_TABLE,\n        Key: { studentId },\n      }));\n      \n      if (!studentResult.Item) {\n        return {\n          statusCode: 404,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Student not found' }),\n        };\n      }\n      \n      const student = studentResult.Item as Student;\n      \n      // Get parent emails\n      const parentEmails: string[] = [];\n      if (student.parentIds && student.parentIds.length > 0) {\n        for (const parentId of student.parentIds) {\n          const parentResult = await docClient.send(new GetCommand({\n            TableName: process.env.PARENTS_TABLE,\n            Key: { parentId },\n          }));\n          if (parentResult.Item) {\n            parentEmails.push(parentResult.Item.email);\n          }\n        }\n      }\n      \n      if (parentEmails.length === 0) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ \n            error: 'No parent emails found',\n            message: 'Please link parents to this student first'\n          }),\n        };\n      }\n      \n      // Get transactions\n      const transactionsResult = await docClient.send(new ScanCommand({\n        TableName: process.env.TRANSACTIONS_TABLE,\n        FilterExpression: 'studentId = :sid AND schoolYear = :sy AND (attribute_not_exists(deleted) OR deleted = :false)',\n        ExpressionAttributeValues: {\n          ':sid': studentId,\n          ':sy': schoolYear,\n          ':false': false,\n        },\n      }));\n      \n      const transactions = (transactionsResult.Items || []).sort((a: any, b: any) => \n        new Date(a.date).getTime() - new Date(b.date).getTime()\n      );\n      \n      // Generate invoice HTML\n      const invoiceHtml = generateInvoiceHTML(student, transactions, schoolYear, emailBody);\n      \n      // Send email\n      const emailParams = {\n        Source: ADMIN_EMAIL,\n        Destination: {\n          ToAddresses: parentEmails,\n        },\n        Message: {\n          Subject: {\n            Data: subject || `Show Choir Invoice - ${student.firstName} ${student.lastName} (${schoolYear})`,\n          },\n          Body: {\n            Html: {\n              Data: invoiceHtml,\n            },\n          },\n        },\n      };\n      \n      try {\n        await sesClient.send(new SendEmailCommand(emailParams));\n        console.log('Invoice email sent successfully to:', parentEmails);\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({\n            success: true,\n            message: `Invoice sent to ${parentEmails.length} parent email(s)`,\n            recipients: parentEmails,\n          }),\n        };\n      } catch (error) {\n        console.error('Error sending email:', error);\n        return {\n          statusCode: 500,\n          headers: corsHeaders,\n          body: JSON.stringify({\n            success: false,\n            error: 'Failed to send email',\n            details: error instanceof Error ? error.message : 'Unknown error',\n            note: 'Make sure email addresses are verified in SES',\n          }),\n        };\n      }\n    }\n\n    // Default response\n    return {\n      statusCode: 404,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        message: 'Not Found',\n        path,\n        method,\n      }),\n    };\n\n  } catch (error) {\n    console.error('Error:', error);\n    return {\n      statusCode: 500,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        error: 'Internal Server Error',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      }),\n    };\n  }\n};\n\nfunction generateInvoiceHTML(student: Student, transactions: any[], schoolYear: string, customMessage?: string): string {\n  let totalCharges = 0;\n  let totalCredits = 0;\n  \n  const transactionRows = transactions.map(t => {\n    if (t.type === 'charge') {\n      totalCharges += t.amount;\n    } else {\n      totalCredits += t.amount;\n    }\n    \n    return `\n      <tr>\n        <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${t.date}</td>\n        <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${t.description}</td>\n        <td style=\"padding: 8px; border-bottom: 1px solid #ddd; text-align: right;\">\n          ${t.type === 'charge' ? `$${t.amount.toFixed(2)}` : ''}\n        </td>\n        <td style=\"padding: 8px; border-bottom: 1px solid #ddd; text-align: right;\">\n          ${t.type === 'credit' ? `$${t.amount.toFixed(2)}` : ''}\n        </td>\n        <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${t.notes || ''}</td>\n      </tr>\n    `;\n  }).join('');\n  \n  const balance = totalCharges - totalCredits;\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <style>\n        body { \n          font-family: Arial, sans-serif; \n          max-width: 800px; \n          margin: 0 auto; \n          padding: 20px;\n        }\n        .header { \n          background: #2c3e50; \n          color: white; \n          padding: 20px; \n          border-radius: 8px 8px 0 0;\n        }\n        .content { \n          background: white; \n          padding: 20px; \n          border: 1px solid #ddd;\n          border-radius: 0 0 8px 8px;\n        }\n        table { \n          width: 100%; \n          border-collapse: collapse; \n          margin: 20px 0;\n        }\n        th { \n          background: #34495e; \n          color: white; \n          padding: 10px; \n          text-align: left;\n        }\n        .summary {\n          margin-top: 20px;\n          padding: 15px;\n          background: #f8f9fa;\n          border-radius: 4px;\n        }\n        .balance {\n          font-size: 20px;\n          font-weight: bold;\n          color: ${balance > 0 ? '#e74c3c' : '#27ae60'};\n        }\n        .custom-message {\n          margin: 20px 0;\n          padding: 15px;\n          background: #e3f2fd;\n          border-left: 4px solid #2196f3;\n          border-radius: 4px;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>Show Choir Invoice</h1>\n        <p>School Year: ${schoolYear}</p>\n      </div>\n      \n      <div class=\"content\">\n        <h2>Student Information</h2>\n        <p><strong>Name:</strong> ${student.firstName} ${student.lastName}</p>\n        <p><strong>Choir(s):</strong> ${student.choir.join(', ')}</p>\n        \n        ${customMessage ? `\n          <div class=\"custom-message\">\n            ${customMessage}\n          </div>\n        ` : ''}\n        \n        <h2>Transaction Details</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Description</th>\n              <th style=\"text-align: right;\">Charges</th>\n              <th style=\"text-align: right;\">Credits</th>\n              <th>Notes</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${transactionRows}\n          </tbody>\n        </table>\n        \n        <div class=\"summary\">\n          <table style=\"width: auto; margin-left: auto;\">\n            <tr>\n              <td style=\"padding: 5px;\"><strong>Total Charges:</strong></td>\n              <td style=\"padding: 5px; text-align: right;\">$${totalCharges.toFixed(2)}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 5px;\"><strong>Total Credits:</strong></td>\n              <td style=\"padding: 5px; text-align: right;\">$${totalCredits.toFixed(2)}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 10px 5px; border-top: 2px solid #333;\">\n                <strong>Current Balance:</strong>\n              </td>\n              <td style=\"padding: 10px 5px; border-top: 2px solid #333; text-align: right;\">\n                <span class=\"balance\">\n                  $${Math.abs(balance).toFixed(2)} ${balance > 0 ? '(Owed)' : balance < 0 ? '(Credit)' : '(Paid in Full)'}\n                </span>\n              </td>\n            </tr>\n          </table>\n        </div>\n        \n        <p style=\"margin-top: 30px; color: #666; font-size: 12px;\">\n          This invoice was generated on ${new Date().toLocaleDateString()}.\n          If you have any questions, please contact ${ADMIN_EMAIL}.\n        </p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n"],
  "mappings": "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",
  "names": ["uuidv4"]
}
